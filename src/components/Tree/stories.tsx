// dependencies
import { storiesOf } from '@storybook/react';
import React, { useState } from 'react';

// StoryTelling
import { Tree } from '.';
import { StoryContainer as Story, StoryVariableDisplay as VariableDisplay } from '../../utils';

// types
import type { IProcessedTreeNode, ITreeNode } from '@adam-sv/arc';

const treeStoryStyle = {
  width: '700px',
  maxWidth: 'calc(100vw - 20px)',
  background: 'var(--surface)',
};

const treeNodes:ITreeNode[] = [
  {
    id: 1,
    label: 'Node One',
    parentId: null,
  },
  {
    id: 2,
    label: 'Node Two',
    parentId: 1,
  },
  {
    id: 3,
    label: 'Node Three',
    parentId: 1,
  },
  {
    id: 4,
    label: 'Node Four',
    parentId: null,
  },
  {
    id: 5,
    label: 'Node Five',
    parentId: 4,
  },
  {
    id: 6,
    label: 'Node Six',
    parentId: 5,
  },
  {
    id: 7,
    label: 'Node Seven',
    parentId: 6,
  },
  {
    id: 8,
    label: 'Node Eight',
    parentId: 4,
  },
  {
    id: 9,
    label: 'Node Nine',
    parentId: 8,
  },
  {
    id: 10,
    label: 'Node Ten',
    parentId: 9,
  },
  {
    id: 11,
    label: 'Node Eleven',
    parentId: 10,
  },
  {
    id: 12,
    label: 'Node Twelve',
    parentId: 11,
  },
  {
    id: 13,
    label: 'Node Thirteen',
    parentId: 12,
  },
  {
    id: 14,
    label: 'Node Fourteen',
    parentId: 13,
  },
  {
    id: 15,
    label: 'Node Fifteen',
    parentId: 14,
  },
  {
    id: 'random',
    label: 'Disabled Leaf Node',
    parentId: null,
    disabled: true,
  },
];

let expandableNodes = [
  {
    id: 1,
    label: 'One',
    parentId: null,
  },
  {
    id: 2,
    label: 'Two',
    parentId: 1,
  },
];

const nodeListeners = {
  onClick: (node: ITreeNode) => console.log('Clicked:', node),
  didExpand: (node: ITreeNode) => console.log('Expanded:', node),
  didCollapse: (node: ITreeNode) => console.log('Collapsed:', node),
};

storiesOf('General/Tree - New/Sizes', module)
  .add('Default', () => (
    <Story style={treeStoryStyle}>
      <Tree
        nodes={treeNodes}
        nodeListeners={nodeListeners}
      />
    </Story>
  ))
  .add('Compact', () => (
    <Story style={treeStoryStyle}>
      <Tree
        nodes={treeNodes}
        nodeListeners={nodeListeners}
        componentSize="compact"
      />
    </Story>
  ))
  .add('Large', () => (
    <Story style={treeStoryStyle}>
      <Tree
        nodes={treeNodes}
        nodeListeners={nodeListeners}
        componentSize="large"
      />
    </Story>
  ));

storiesOf('General/Tree - New/Initially Expanded Depth', module)
  .add('Default = 1', () => (
    <Story style={treeStoryStyle}>
      <Tree
        nodes={treeNodes}
        nodeListeners={nodeListeners}
      />
    </Story>
  ))
  .add('None = 0', () => (
    <Story style={treeStoryStyle}>
      <Tree
        nodes={treeNodes}
        nodeListeners={nodeListeners}
        initiallyExpandedDepth={0}
      />
    </Story>
  ))
  .add('Some = 3', () => (
    <Story style={treeStoryStyle}>
      <Tree
        nodes={treeNodes}
        nodeListeners={nodeListeners}
        initiallyExpandedDepth={3}
      />
    </Story>
  ))
  .add('All = -1', () => (
    <Story style={treeStoryStyle}>
      <Tree
        nodes={treeNodes}
        nodeListeners={nodeListeners}
        initiallyExpandedDepth={-1}
      />
    </Story>
  ));

storiesOf('General/Tree - New/Load While Navigating', module)
  .add('Adds random handlers', () => {
    const [nodes, setNodes] = useState<ITreeNode[]>(expandableNodes);
    return (
      <Story style={treeStoryStyle}>
        <Tree
          nodes={nodes}
          nodeListeners={{
            didExpand: (node: IProcessedTreeNode) => {
              nodes.push({
                parentId: node.id,
                label: 'Generated by didExpand handler',
                id: `${node.id}-${Math.random().toString(36).slice(2, 11)}`,
              });
              setNodes(nodes.slice());
            },
          }}
          initiallyExpandedDepth={0}
        />
      </Story>
    );
  });

storiesOf('General/Tree - New', module)
  .add('Variables', () => (
    <VariableDisplay
      vars={{
        treeNodes,
        treeStoryStyle,
      }}
    />
  ))
